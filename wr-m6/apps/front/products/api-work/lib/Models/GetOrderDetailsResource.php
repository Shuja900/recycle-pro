<?php
/**
 * GetOrderDetailsResource
 *
 * PHP version 5
 *
 * @category Class
 * @package  RoyalMail\ClickAndDrop\Rest\Api
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * ChannelShipper & Royal Mail Public API
 *
 * Import your orders, retrieve your orders and generate labels.
 *
 * OpenAPI spec version: 1.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.4.24-SNAPSHOT
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace RoyalMail\ClickAndDrop\Rest\Api\Models;

use \ArrayAccess;
use \RoyalMail\ClickAndDrop\Rest\Api\ObjectSerializer;

/**
 * GetOrderDetailsResource Class Doc Comment
 *
 * @category Class
 * @package  RoyalMail\ClickAndDrop\Rest\Api
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class GetOrderDetailsResource implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'GetOrderDetailsResource';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'orderIdentifier' => 'int',
        'orderStatus' => 'string',
        'createdOn' => '\DateTime',
        'printedOn' => '\DateTime',
        'shippedOn' => '\DateTime',
        'postageAppliedOn' => '\DateTime',
        'manifestedOn' => '\DateTime',
        'orderDate' => '\DateTime',
        'despatchedByOtherCourierOn' => '\DateTime',
        'tradingName' => 'string',
        'channel' => 'string',
        'marketplaceTypeName' => 'string',
        'department' => 'string',
        'aIRNumber' => 'string',
        'requiresExportLicense' => 'bool',
        'commercialInvoiceNumber' => 'string',
        'commercialInvoiceDate' => '\DateTime',
        'orderReference' => 'string',
        'channelShippingMethod' => 'string',
        'specialInstructions' => 'string',
        'pickerSpecialInstructions' => 'string',
        'subtotal' => 'float',
        'shippingCostCharged' => 'float',
        'orderDiscount' => 'float',
        'total' => 'float',
        'weightInGrams' => 'int',
        'packageSize' => 'string',
        'accountBatchNumber' => 'string',
        'currencyCode' => 'string',
        'shippingDetails' => '\RoyalMail\ClickAndDrop\Rest\Api\Models\GetShippingDetailsResult',
        'shippingInfo' => '\RoyalMail\ClickAndDrop\Rest\Api\Models\GetPostalDetailsResult',
        'billingInfo' => '\RoyalMail\ClickAndDrop\Rest\Api\Models\GetPostalDetailsResult',
        'orderLines' => '\RoyalMail\ClickAndDrop\Rest\Api\Models\GetOrderLineResult[]',
        'tags' => '\RoyalMail\ClickAndDrop\Rest\Api\Models\GetTagDetailsResult[]'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'orderIdentifier' => null,
        'orderStatus' => null,
        'createdOn' => 'date-time',
        'printedOn' => 'date-time',
        'shippedOn' => 'date-time',
        'postageAppliedOn' => 'date-time',
        'manifestedOn' => 'date-time',
        'orderDate' => 'date-time',
        'despatchedByOtherCourierOn' => 'date-time',
        'tradingName' => null,
        'channel' => null,
        'marketplaceTypeName' => null,
        'department' => null,
        'aIRNumber' => null,
        'requiresExportLicense' => null,
        'commercialInvoiceNumber' => null,
        'commercialInvoiceDate' => 'date-time',
        'orderReference' => null,
        'channelShippingMethod' => null,
        'specialInstructions' => null,
        'pickerSpecialInstructions' => null,
        'subtotal' => null,
        'shippingCostCharged' => null,
        'orderDiscount' => null,
        'total' => null,
        'weightInGrams' => null,
        'packageSize' => null,
        'accountBatchNumber' => null,
        'currencyCode' => null,
        'shippingDetails' => null,
        'shippingInfo' => null,
        'billingInfo' => null,
        'orderLines' => null,
        'tags' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'orderIdentifier' => 'orderIdentifier',
        'orderStatus' => 'orderStatus',
        'createdOn' => 'createdOn',
        'printedOn' => 'printedOn',
        'shippedOn' => 'shippedOn',
        'postageAppliedOn' => 'postageAppliedOn',
        'manifestedOn' => 'manifestedOn',
        'orderDate' => 'orderDate',
        'despatchedByOtherCourierOn' => 'despatchedByOtherCourierOn',
        'tradingName' => 'tradingName',
        'channel' => 'channel',
        'marketplaceTypeName' => 'marketplaceTypeName',
        'department' => 'department',
        'aIRNumber' => 'AIRNumber',
        'requiresExportLicense' => 'requiresExportLicense',
        'commercialInvoiceNumber' => 'commercialInvoiceNumber',
        'commercialInvoiceDate' => 'commercialInvoiceDate',
        'orderReference' => 'orderReference',
        'channelShippingMethod' => 'channelShippingMethod',
        'specialInstructions' => 'specialInstructions',
        'pickerSpecialInstructions' => 'pickerSpecialInstructions',
        'subtotal' => 'subtotal',
        'shippingCostCharged' => 'shippingCostCharged',
        'orderDiscount' => 'orderDiscount',
        'total' => 'total',
        'weightInGrams' => 'weightInGrams',
        'packageSize' => 'packageSize',
        'accountBatchNumber' => 'accountBatchNumber',
        'currencyCode' => 'currencyCode',
        'shippingDetails' => 'shippingDetails',
        'shippingInfo' => 'shippingInfo',
        'billingInfo' => 'billingInfo',
        'orderLines' => 'orderLines',
        'tags' => 'tags'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'orderIdentifier' => 'setOrderIdentifier',
        'orderStatus' => 'setOrderStatus',
        'createdOn' => 'setCreatedOn',
        'printedOn' => 'setPrintedOn',
        'shippedOn' => 'setShippedOn',
        'postageAppliedOn' => 'setPostageAppliedOn',
        'manifestedOn' => 'setManifestedOn',
        'orderDate' => 'setOrderDate',
        'despatchedByOtherCourierOn' => 'setDespatchedByOtherCourierOn',
        'tradingName' => 'setTradingName',
        'channel' => 'setChannel',
        'marketplaceTypeName' => 'setMarketplaceTypeName',
        'department' => 'setDepartment',
        'aIRNumber' => 'setAIRNumber',
        'requiresExportLicense' => 'setRequiresExportLicense',
        'commercialInvoiceNumber' => 'setCommercialInvoiceNumber',
        'commercialInvoiceDate' => 'setCommercialInvoiceDate',
        'orderReference' => 'setOrderReference',
        'channelShippingMethod' => 'setChannelShippingMethod',
        'specialInstructions' => 'setSpecialInstructions',
        'pickerSpecialInstructions' => 'setPickerSpecialInstructions',
        'subtotal' => 'setSubtotal',
        'shippingCostCharged' => 'setShippingCostCharged',
        'orderDiscount' => 'setOrderDiscount',
        'total' => 'setTotal',
        'weightInGrams' => 'setWeightInGrams',
        'packageSize' => 'setPackageSize',
        'accountBatchNumber' => 'setAccountBatchNumber',
        'currencyCode' => 'setCurrencyCode',
        'shippingDetails' => 'setShippingDetails',
        'shippingInfo' => 'setShippingInfo',
        'billingInfo' => 'setBillingInfo',
        'orderLines' => 'setOrderLines',
        'tags' => 'setTags'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'orderIdentifier' => 'getOrderIdentifier',
        'orderStatus' => 'getOrderStatus',
        'createdOn' => 'getCreatedOn',
        'printedOn' => 'getPrintedOn',
        'shippedOn' => 'getShippedOn',
        'postageAppliedOn' => 'getPostageAppliedOn',
        'manifestedOn' => 'getManifestedOn',
        'orderDate' => 'getOrderDate',
        'despatchedByOtherCourierOn' => 'getDespatchedByOtherCourierOn',
        'tradingName' => 'getTradingName',
        'channel' => 'getChannel',
        'marketplaceTypeName' => 'getMarketplaceTypeName',
        'department' => 'getDepartment',
        'aIRNumber' => 'getAIRNumber',
        'requiresExportLicense' => 'getRequiresExportLicense',
        'commercialInvoiceNumber' => 'getCommercialInvoiceNumber',
        'commercialInvoiceDate' => 'getCommercialInvoiceDate',
        'orderReference' => 'getOrderReference',
        'channelShippingMethod' => 'getChannelShippingMethod',
        'specialInstructions' => 'getSpecialInstructions',
        'pickerSpecialInstructions' => 'getPickerSpecialInstructions',
        'subtotal' => 'getSubtotal',
        'shippingCostCharged' => 'getShippingCostCharged',
        'orderDiscount' => 'getOrderDiscount',
        'total' => 'getTotal',
        'weightInGrams' => 'getWeightInGrams',
        'packageSize' => 'getPackageSize',
        'accountBatchNumber' => 'getAccountBatchNumber',
        'currencyCode' => 'getCurrencyCode',
        'shippingDetails' => 'getShippingDetails',
        'shippingInfo' => 'getShippingInfo',
        'billingInfo' => 'getBillingInfo',
        'orderLines' => 'getOrderLines',
        'tags' => 'getTags'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['orderIdentifier'] = isset($data['orderIdentifier']) ? $data['orderIdentifier'] : null;
        $this->container['orderStatus'] = isset($data['orderStatus']) ? $data['orderStatus'] : null;
        $this->container['createdOn'] = isset($data['createdOn']) ? $data['createdOn'] : null;
        $this->container['printedOn'] = isset($data['printedOn']) ? $data['printedOn'] : null;
        $this->container['shippedOn'] = isset($data['shippedOn']) ? $data['shippedOn'] : null;
        $this->container['postageAppliedOn'] = isset($data['postageAppliedOn']) ? $data['postageAppliedOn'] : null;
        $this->container['manifestedOn'] = isset($data['manifestedOn']) ? $data['manifestedOn'] : null;
        $this->container['orderDate'] = isset($data['orderDate']) ? $data['orderDate'] : null;
        $this->container['despatchedByOtherCourierOn'] = isset($data['despatchedByOtherCourierOn']) ? $data['despatchedByOtherCourierOn'] : null;
        $this->container['tradingName'] = isset($data['tradingName']) ? $data['tradingName'] : null;
        $this->container['channel'] = isset($data['channel']) ? $data['channel'] : null;
        $this->container['marketplaceTypeName'] = isset($data['marketplaceTypeName']) ? $data['marketplaceTypeName'] : null;
        $this->container['department'] = isset($data['department']) ? $data['department'] : null;
        $this->container['aIRNumber'] = isset($data['aIRNumber']) ? $data['aIRNumber'] : null;
        $this->container['requiresExportLicense'] = isset($data['requiresExportLicense']) ? $data['requiresExportLicense'] : null;
        $this->container['commercialInvoiceNumber'] = isset($data['commercialInvoiceNumber']) ? $data['commercialInvoiceNumber'] : null;
        $this->container['commercialInvoiceDate'] = isset($data['commercialInvoiceDate']) ? $data['commercialInvoiceDate'] : null;
        $this->container['orderReference'] = isset($data['orderReference']) ? $data['orderReference'] : null;
        $this->container['channelShippingMethod'] = isset($data['channelShippingMethod']) ? $data['channelShippingMethod'] : null;
        $this->container['specialInstructions'] = isset($data['specialInstructions']) ? $data['specialInstructions'] : null;
        $this->container['pickerSpecialInstructions'] = isset($data['pickerSpecialInstructions']) ? $data['pickerSpecialInstructions'] : null;
        $this->container['subtotal'] = isset($data['subtotal']) ? $data['subtotal'] : null;
        $this->container['shippingCostCharged'] = isset($data['shippingCostCharged']) ? $data['shippingCostCharged'] : null;
        $this->container['orderDiscount'] = isset($data['orderDiscount']) ? $data['orderDiscount'] : null;
        $this->container['total'] = isset($data['total']) ? $data['total'] : null;
        $this->container['weightInGrams'] = isset($data['weightInGrams']) ? $data['weightInGrams'] : null;
        $this->container['packageSize'] = isset($data['packageSize']) ? $data['packageSize'] : null;
        $this->container['accountBatchNumber'] = isset($data['accountBatchNumber']) ? $data['accountBatchNumber'] : null;
        $this->container['currencyCode'] = isset($data['currencyCode']) ? $data['currencyCode'] : null;
        $this->container['shippingDetails'] = isset($data['shippingDetails']) ? $data['shippingDetails'] : null;
        $this->container['shippingInfo'] = isset($data['shippingInfo']) ? $data['shippingInfo'] : null;
        $this->container['billingInfo'] = isset($data['billingInfo']) ? $data['billingInfo'] : null;
        $this->container['orderLines'] = isset($data['orderLines']) ? $data['orderLines'] : null;
        $this->container['tags'] = isset($data['tags']) ? $data['tags'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['subtotal'] === null) {
            $invalidProperties[] = "'subtotal' can't be null";
        }
        if ($this->container['shippingCostCharged'] === null) {
            $invalidProperties[] = "'shippingCostCharged' can't be null";
        }
        if ($this->container['orderDiscount'] === null) {
            $invalidProperties[] = "'orderDiscount' can't be null";
        }
        if ($this->container['total'] === null) {
            $invalidProperties[] = "'total' can't be null";
        }
        if ($this->container['weightInGrams'] === null) {
            $invalidProperties[] = "'weightInGrams' can't be null";
        }
        if (!is_null($this->container['currencyCode']) && (mb_strlen($this->container['currencyCode']) > 3)) {
            $invalidProperties[] = "invalid value for 'currencyCode', the character length must be smaller than or equal to 3.";
        }

        if ($this->container['shippingDetails'] === null) {
            $invalidProperties[] = "'shippingDetails' can't be null";
        }
        if ($this->container['shippingInfo'] === null) {
            $invalidProperties[] = "'shippingInfo' can't be null";
        }
        if ($this->container['billingInfo'] === null) {
            $invalidProperties[] = "'billingInfo' can't be null";
        }
        if ($this->container['orderLines'] === null) {
            $invalidProperties[] = "'orderLines' can't be null";
        }
        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets orderIdentifier
     *
     * @return int
     */
    public function getOrderIdentifier()
    {
        return $this->container['orderIdentifier'];
    }

    /**
     * Sets orderIdentifier
     *
     * @param int $orderIdentifier orderIdentifier
     *
     * @return $this
     */
    public function setOrderIdentifier($orderIdentifier)
    {
        $this->container['orderIdentifier'] = $orderIdentifier;

        return $this;
    }

    /**
     * Gets orderStatus
     *
     * @return string
     */
    public function getOrderStatus()
    {
        return $this->container['orderStatus'];
    }

    /**
     * Sets orderStatus
     *
     * @param string $orderStatus orderStatus
     *
     * @return $this
     */
    public function setOrderStatus($orderStatus)
    {
        $this->container['orderStatus'] = $orderStatus;

        return $this;
    }

    /**
     * Gets createdOn
     *
     * @return \DateTime
     */
    public function getCreatedOn()
    {
        return $this->container['createdOn'];
    }

    /**
     * Sets createdOn
     *
     * @param \DateTime $createdOn createdOn
     *
     * @return $this
     */
    public function setCreatedOn($createdOn)
    {
        $this->container['createdOn'] = $createdOn;

        return $this;
    }

    /**
     * Gets printedOn
     *
     * @return \DateTime
     */
    public function getPrintedOn()
    {
        return $this->container['printedOn'];
    }

    /**
     * Sets printedOn
     *
     * @param \DateTime $printedOn printedOn
     *
     * @return $this
     */
    public function setPrintedOn($printedOn)
    {
        $this->container['printedOn'] = $printedOn;

        return $this;
    }

    /**
     * Gets shippedOn
     *
     * @return \DateTime
     */
    public function getShippedOn()
    {
        return $this->container['shippedOn'];
    }

    /**
     * Sets shippedOn
     *
     * @param \DateTime $shippedOn shippedOn
     *
     * @return $this
     */
    public function setShippedOn($shippedOn)
    {
        $this->container['shippedOn'] = $shippedOn;

        return $this;
    }

    /**
     * Gets postageAppliedOn
     *
     * @return \DateTime
     */
    public function getPostageAppliedOn()
    {
        return $this->container['postageAppliedOn'];
    }

    /**
     * Sets postageAppliedOn
     *
     * @param \DateTime $postageAppliedOn postageAppliedOn
     *
     * @return $this
     */
    public function setPostageAppliedOn($postageAppliedOn)
    {
        $this->container['postageAppliedOn'] = $postageAppliedOn;

        return $this;
    }

    /**
     * Gets manifestedOn
     *
     * @return \DateTime
     */
    public function getManifestedOn()
    {
        return $this->container['manifestedOn'];
    }

    /**
     * Sets manifestedOn
     *
     * @param \DateTime $manifestedOn manifestedOn
     *
     * @return $this
     */
    public function setManifestedOn($manifestedOn)
    {
        $this->container['manifestedOn'] = $manifestedOn;

        return $this;
    }

    /**
     * Gets orderDate
     *
     * @return \DateTime
     */
    public function getOrderDate()
    {
        return $this->container['orderDate'];
    }

    /**
     * Sets orderDate
     *
     * @param \DateTime $orderDate orderDate
     *
     * @return $this
     */
    public function setOrderDate($orderDate)
    {
        $this->container['orderDate'] = $orderDate;

        return $this;
    }

    /**
     * Gets despatchedByOtherCourierOn
     *
     * @return \DateTime
     */
    public function getDespatchedByOtherCourierOn()
    {
        return $this->container['despatchedByOtherCourierOn'];
    }

    /**
     * Sets despatchedByOtherCourierOn
     *
     * @param \DateTime $despatchedByOtherCourierOn despatchedByOtherCourierOn
     *
     * @return $this
     */
    public function setDespatchedByOtherCourierOn($despatchedByOtherCourierOn)
    {
        $this->container['despatchedByOtherCourierOn'] = $despatchedByOtherCourierOn;

        return $this;
    }

    /**
     * Gets tradingName
     *
     * @return string
     */
    public function getTradingName()
    {
        return $this->container['tradingName'];
    }

    /**
     * Sets tradingName
     *
     * @param string $tradingName tradingName
     *
     * @return $this
     */
    public function setTradingName($tradingName)
    {
        $this->container['tradingName'] = $tradingName;

        return $this;
    }

    /**
     * Gets channel
     *
     * @return string
     */
    public function getChannel()
    {
        return $this->container['channel'];
    }

    /**
     * Sets channel
     *
     * @param string $channel channel
     *
     * @return $this
     */
    public function setChannel($channel)
    {
        $this->container['channel'] = $channel;

        return $this;
    }

    /**
     * Gets marketplaceTypeName
     *
     * @return string
     */
    public function getMarketplaceTypeName()
    {
        return $this->container['marketplaceTypeName'];
    }

    /**
     * Sets marketplaceTypeName
     *
     * @param string $marketplaceTypeName marketplaceTypeName
     *
     * @return $this
     */
    public function setMarketplaceTypeName($marketplaceTypeName)
    {
        $this->container['marketplaceTypeName'] = $marketplaceTypeName;

        return $this;
    }

    /**
     * Gets department
     *
     * @return string
     */
    public function getDepartment()
    {
        return $this->container['department'];
    }

    /**
     * Sets department
     *
     * @param string $department department
     *
     * @return $this
     */
    public function setDepartment($department)
    {
        $this->container['department'] = $department;

        return $this;
    }

    /**
     * Gets aIRNumber
     *
     * @return string
     */
    public function getAIRNumber()
    {
        return $this->container['aIRNumber'];
    }

    /**
     * Sets aIRNumber
     *
     * @param string $aIRNumber aIRNumber
     *
     * @return $this
     */
    public function setAIRNumber($aIRNumber)
    {
        $this->container['aIRNumber'] = $aIRNumber;

        return $this;
    }

    /**
     * Gets requiresExportLicense
     *
     * @return bool
     */
    public function getRequiresExportLicense()
    {
        return $this->container['requiresExportLicense'];
    }

    /**
     * Sets requiresExportLicense
     *
     * @param bool $requiresExportLicense requiresExportLicense
     *
     * @return $this
     */
    public function setRequiresExportLicense($requiresExportLicense)
    {
        $this->container['requiresExportLicense'] = $requiresExportLicense;

        return $this;
    }

    /**
     * Gets commercialInvoiceNumber
     *
     * @return string
     */
    public function getCommercialInvoiceNumber()
    {
        return $this->container['commercialInvoiceNumber'];
    }

    /**
     * Sets commercialInvoiceNumber
     *
     * @param string $commercialInvoiceNumber commercialInvoiceNumber
     *
     * @return $this
     */
    public function setCommercialInvoiceNumber($commercialInvoiceNumber)
    {
        $this->container['commercialInvoiceNumber'] = $commercialInvoiceNumber;

        return $this;
    }

    /**
     * Gets commercialInvoiceDate
     *
     * @return \DateTime
     */
    public function getCommercialInvoiceDate()
    {
        return $this->container['commercialInvoiceDate'];
    }

    /**
     * Sets commercialInvoiceDate
     *
     * @param \DateTime $commercialInvoiceDate commercialInvoiceDate
     *
     * @return $this
     */
    public function setCommercialInvoiceDate($commercialInvoiceDate)
    {
        $this->container['commercialInvoiceDate'] = $commercialInvoiceDate;

        return $this;
    }

    /**
     * Gets orderReference
     *
     * @return string
     */
    public function getOrderReference()
    {
        return $this->container['orderReference'];
    }

    /**
     * Sets orderReference
     *
     * @param string $orderReference orderReference
     *
     * @return $this
     */
    public function setOrderReference($orderReference)
    {
        $this->container['orderReference'] = $orderReference;

        return $this;
    }

    /**
     * Gets channelShippingMethod
     *
     * @return string
     */
    public function getChannelShippingMethod()
    {
        return $this->container['channelShippingMethod'];
    }

    /**
     * Sets channelShippingMethod
     *
     * @param string $channelShippingMethod channelShippingMethod
     *
     * @return $this
     */
    public function setChannelShippingMethod($channelShippingMethod)
    {
        $this->container['channelShippingMethod'] = $channelShippingMethod;

        return $this;
    }

    /**
     * Gets specialInstructions
     *
     * @return string
     */
    public function getSpecialInstructions()
    {
        return $this->container['specialInstructions'];
    }

    /**
     * Sets specialInstructions
     *
     * @param string $specialInstructions specialInstructions
     *
     * @return $this
     */
    public function setSpecialInstructions($specialInstructions)
    {
        $this->container['specialInstructions'] = $specialInstructions;

        return $this;
    }

    /**
     * Gets pickerSpecialInstructions
     *
     * @return string
     */
    public function getPickerSpecialInstructions()
    {
        return $this->container['pickerSpecialInstructions'];
    }

    /**
     * Sets pickerSpecialInstructions
     *
     * @param string $pickerSpecialInstructions pickerSpecialInstructions
     *
     * @return $this
     */
    public function setPickerSpecialInstructions($pickerSpecialInstructions)
    {
        $this->container['pickerSpecialInstructions'] = $pickerSpecialInstructions;

        return $this;
    }

    /**
     * Gets subtotal
     *
     * @return float
     */
    public function getSubtotal()
    {
        return $this->container['subtotal'];
    }

    /**
     * Sets subtotal
     *
     * @param float $subtotal subtotal
     *
     * @return $this
     */
    public function setSubtotal($subtotal)
    {
        $this->container['subtotal'] = $subtotal;

        return $this;
    }

    /**
     * Gets shippingCostCharged
     *
     * @return float
     */
    public function getShippingCostCharged()
    {
        return $this->container['shippingCostCharged'];
    }

    /**
     * Sets shippingCostCharged
     *
     * @param float $shippingCostCharged shippingCostCharged
     *
     * @return $this
     */
    public function setShippingCostCharged($shippingCostCharged)
    {
        $this->container['shippingCostCharged'] = $shippingCostCharged;

        return $this;
    }

    /**
     * Gets orderDiscount
     *
     * @return float
     */
    public function getOrderDiscount()
    {
        return $this->container['orderDiscount'];
    }

    /**
     * Sets orderDiscount
     *
     * @param float $orderDiscount orderDiscount
     *
     * @return $this
     */
    public function setOrderDiscount($orderDiscount)
    {
        $this->container['orderDiscount'] = $orderDiscount;

        return $this;
    }

    /**
     * Gets total
     *
     * @return float
     */
    public function getTotal()
    {
        return $this->container['total'];
    }

    /**
     * Sets total
     *
     * @param float $total total
     *
     * @return $this
     */
    public function setTotal($total)
    {
        $this->container['total'] = $total;

        return $this;
    }

    /**
     * Gets weightInGrams
     *
     * @return int
     */
    public function getWeightInGrams()
    {
        return $this->container['weightInGrams'];
    }

    /**
     * Sets weightInGrams
     *
     * @param int $weightInGrams weightInGrams
     *
     * @return $this
     */
    public function setWeightInGrams($weightInGrams)
    {
        $this->container['weightInGrams'] = $weightInGrams;

        return $this;
    }

    /**
     * Gets packageSize
     *
     * @return string
     */
    public function getPackageSize()
    {
        return $this->container['packageSize'];
    }

    /**
     * Sets packageSize
     *
     * @param string $packageSize packageSize
     *
     * @return $this
     */
    public function setPackageSize($packageSize)
    {
        $this->container['packageSize'] = $packageSize;

        return $this;
    }

    /**
     * Gets accountBatchNumber
     *
     * @return string
     */
    public function getAccountBatchNumber()
    {
        return $this->container['accountBatchNumber'];
    }

    /**
     * Sets accountBatchNumber
     *
     * @param string $accountBatchNumber accountBatchNumber
     *
     * @return $this
     */
    public function setAccountBatchNumber($accountBatchNumber)
    {
        $this->container['accountBatchNumber'] = $accountBatchNumber;

        return $this;
    }

    /**
     * Gets currencyCode
     *
     * @return string
     */
    public function getCurrencyCode()
    {
        return $this->container['currencyCode'];
    }

    /**
     * Sets currencyCode
     *
     * @param string $currencyCode currencyCode
     *
     * @return $this
     */
    public function setCurrencyCode($currencyCode)
    {
        if (!is_null($currencyCode) && (mb_strlen($currencyCode) > 3)) {
            throw new \InvalidArgumentException('invalid length for $currencyCode when calling GetOrderDetailsResource., must be smaller than or equal to 3.');
        }

        $this->container['currencyCode'] = $currencyCode;

        return $this;
    }

    /**
     * Gets shippingDetails
     *
     * @return \RoyalMail\ClickAndDrop\Rest\Api\Models\GetShippingDetailsResult
     */
    public function getShippingDetails()
    {
        return $this->container['shippingDetails'];
    }

    /**
     * Sets shippingDetails
     *
     * @param \RoyalMail\ClickAndDrop\Rest\Api\Models\GetShippingDetailsResult $shippingDetails shippingDetails
     *
     * @return $this
     */
    public function setShippingDetails($shippingDetails)
    {
        $this->container['shippingDetails'] = $shippingDetails;

        return $this;
    }

    /**
     * Gets shippingInfo
     *
     * @return \RoyalMail\ClickAndDrop\Rest\Api\Models\GetPostalDetailsResult
     */
    public function getShippingInfo()
    {
        return $this->container['shippingInfo'];
    }

    /**
     * Sets shippingInfo
     *
     * @param \RoyalMail\ClickAndDrop\Rest\Api\Models\GetPostalDetailsResult $shippingInfo shippingInfo
     *
     * @return $this
     */
    public function setShippingInfo($shippingInfo)
    {
        $this->container['shippingInfo'] = $shippingInfo;

        return $this;
    }

    /**
     * Gets billingInfo
     *
     * @return \RoyalMail\ClickAndDrop\Rest\Api\Models\GetPostalDetailsResult
     */
    public function getBillingInfo()
    {
        return $this->container['billingInfo'];
    }

    /**
     * Sets billingInfo
     *
     * @param \RoyalMail\ClickAndDrop\Rest\Api\Models\GetPostalDetailsResult $billingInfo billingInfo
     *
     * @return $this
     */
    public function setBillingInfo($billingInfo)
    {
        $this->container['billingInfo'] = $billingInfo;

        return $this;
    }

    /**
     * Gets orderLines
     *
     * @return \RoyalMail\ClickAndDrop\Rest\Api\Models\GetOrderLineResult[]
     */
    public function getOrderLines()
    {
        return $this->container['orderLines'];
    }

    /**
     * Sets orderLines
     *
     * @param \RoyalMail\ClickAndDrop\Rest\Api\Models\GetOrderLineResult[] $orderLines orderLines
     *
     * @return $this
     */
    public function setOrderLines($orderLines)
    {
        $this->container['orderLines'] = $orderLines;

        return $this;
    }

    /**
     * Gets tags
     *
     * @return \RoyalMail\ClickAndDrop\Rest\Api\Models\GetTagDetailsResult[]
     */
    public function getTags()
    {
        return $this->container['tags'];
    }

    /**
     * Sets tags
     *
     * @param \RoyalMail\ClickAndDrop\Rest\Api\Models\GetTagDetailsResult[] $tags tags
     *
     * @return $this
     */
    public function setTags($tags)
    {
        $this->container['tags'] = $tags;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


