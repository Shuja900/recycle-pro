<?php
/**
 * DimensionsRequest
 *
 * PHP version 5
 *
 * @category Class
 * @package  RoyalMail\ClickAndDrop\Rest\Api
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * ChannelShipper & Royal Mail Public API
 *
 * Import your orders, retrieve your orders and generate labels.
 *
 * OpenAPI spec version: 1.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.4.24-SNAPSHOT
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace RoyalMail\ClickAndDrop\Rest\Api\Models;

use \ArrayAccess;
use \RoyalMail\ClickAndDrop\Rest\Api\ObjectSerializer;

/**
 * DimensionsRequest Class Doc Comment
 *
 * @category Class
 * @description It is not mandatory to include the dimensions field. If the dimensions field is included then the inner fields heightInMms, widthInMms and depthInMms must be specified with non-zero values.
 * @package  RoyalMail\ClickAndDrop\Rest\Api
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class DimensionsRequest implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'DimensionsRequest';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'heightInMms' => 'int',
        'widthInMms' => 'int',
        'depthInMms' => 'int'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'heightInMms' => 'int32',
        'widthInMms' => 'int32',
        'depthInMms' => 'int32'
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'heightInMms' => 'heightInMms',
        'widthInMms' => 'widthInMms',
        'depthInMms' => 'depthInMms'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'heightInMms' => 'setHeightInMms',
        'widthInMms' => 'setWidthInMms',
        'depthInMms' => 'setDepthInMms'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'heightInMms' => 'getHeightInMms',
        'widthInMms' => 'getWidthInMms',
        'depthInMms' => 'getDepthInMms'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['heightInMms'] = isset($data['heightInMms']) ? $data['heightInMms'] : null;
        $this->container['widthInMms'] = isset($data['widthInMms']) ? $data['widthInMms'] : null;
        $this->container['depthInMms'] = isset($data['depthInMms']) ? $data['depthInMms'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['heightInMms'] === null) {
            $invalidProperties[] = "'heightInMms' can't be null";
        }
        if ($this->container['widthInMms'] === null) {
            $invalidProperties[] = "'widthInMms' can't be null";
        }
        if ($this->container['depthInMms'] === null) {
            $invalidProperties[] = "'depthInMms' can't be null";
        }
        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets heightInMms
     *
     * @return int
     */
    public function getHeightInMms()
    {
        return $this->container['heightInMms'];
    }

    /**
     * Sets heightInMms
     *
     * @param int $heightInMms heightInMms
     *
     * @return $this
     */
    public function setHeightInMms($heightInMms)
    {
        $this->container['heightInMms'] = $heightInMms;

        return $this;
    }

    /**
     * Gets widthInMms
     *
     * @return int
     */
    public function getWidthInMms()
    {
        return $this->container['widthInMms'];
    }

    /**
     * Sets widthInMms
     *
     * @param int $widthInMms widthInMms
     *
     * @return $this
     */
    public function setWidthInMms($widthInMms)
    {
        $this->container['widthInMms'] = $widthInMms;

        return $this;
    }

    /**
     * Gets depthInMms
     *
     * @return int
     */
    public function getDepthInMms()
    {
        return $this->container['depthInMms'];
    }

    /**
     * Sets depthInMms
     *
     * @param int $depthInMms depthInMms
     *
     * @return $this
     */
    public function setDepthInMms($depthInMms)
    {
        $this->container['depthInMms'] = $depthInMms;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


