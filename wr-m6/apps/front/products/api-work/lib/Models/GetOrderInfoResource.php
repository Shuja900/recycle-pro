<?php
/**
 * GetOrderInfoResource
 *
 * PHP version 5
 *
 * @category Class
 * @package  RoyalMail\ClickAndDrop\Rest\Api
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * ChannelShipper & Royal Mail Public API
 *
 * Import your orders, retrieve your orders and generate labels.
 *
 * OpenAPI spec version: 1.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.4.24-SNAPSHOT
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace RoyalMail\ClickAndDrop\Rest\Api\Models;

use \ArrayAccess;
use \RoyalMail\ClickAndDrop\Rest\Api\ObjectSerializer;

/**
 * GetOrderInfoResource Class Doc Comment
 *
 * @category Class
 * @package  RoyalMail\ClickAndDrop\Rest\Api
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class GetOrderInfoResource implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'GetOrderInfoResource';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'orderIdentifier' => 'int',
        'orderReference' => 'string',
        'createdOn' => '\DateTime',
        'orderDate' => '\DateTime',
        'printedOn' => '\DateTime',
        'manifestedOn' => '\DateTime',
        'shippedOn' => '\DateTime',
        'trackingNumber' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'orderIdentifier' => null,
        'orderReference' => null,
        'createdOn' => 'date-time',
        'orderDate' => 'date-time',
        'printedOn' => 'date-time',
        'manifestedOn' => 'date-time',
        'shippedOn' => 'date-time',
        'trackingNumber' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'orderIdentifier' => 'orderIdentifier',
        'orderReference' => 'orderReference',
        'createdOn' => 'createdOn',
        'orderDate' => 'orderDate',
        'printedOn' => 'printedOn',
        'manifestedOn' => 'manifestedOn',
        'shippedOn' => 'shippedOn',
        'trackingNumber' => 'trackingNumber'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'orderIdentifier' => 'setOrderIdentifier',
        'orderReference' => 'setOrderReference',
        'createdOn' => 'setCreatedOn',
        'orderDate' => 'setOrderDate',
        'printedOn' => 'setPrintedOn',
        'manifestedOn' => 'setManifestedOn',
        'shippedOn' => 'setShippedOn',
        'trackingNumber' => 'setTrackingNumber'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'orderIdentifier' => 'getOrderIdentifier',
        'orderReference' => 'getOrderReference',
        'createdOn' => 'getCreatedOn',
        'orderDate' => 'getOrderDate',
        'printedOn' => 'getPrintedOn',
        'manifestedOn' => 'getManifestedOn',
        'shippedOn' => 'getShippedOn',
        'trackingNumber' => 'getTrackingNumber'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['orderIdentifier'] = isset($data['orderIdentifier']) ? $data['orderIdentifier'] : null;
        $this->container['orderReference'] = isset($data['orderReference']) ? $data['orderReference'] : null;
        $this->container['createdOn'] = isset($data['createdOn']) ? $data['createdOn'] : null;
        $this->container['orderDate'] = isset($data['orderDate']) ? $data['orderDate'] : null;
        $this->container['printedOn'] = isset($data['printedOn']) ? $data['printedOn'] : null;
        $this->container['manifestedOn'] = isset($data['manifestedOn']) ? $data['manifestedOn'] : null;
        $this->container['shippedOn'] = isset($data['shippedOn']) ? $data['shippedOn'] : null;
        $this->container['trackingNumber'] = isset($data['trackingNumber']) ? $data['trackingNumber'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['orderIdentifier'] === null) {
            $invalidProperties[] = "'orderIdentifier' can't be null";
        }
        if ($this->container['createdOn'] === null) {
            $invalidProperties[] = "'createdOn' can't be null";
        }
        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets orderIdentifier
     *
     * @return int
     */
    public function getOrderIdentifier()
    {
        return $this->container['orderIdentifier'];
    }

    /**
     * Sets orderIdentifier
     *
     * @param int $orderIdentifier orderIdentifier
     *
     * @return $this
     */
    public function setOrderIdentifier($orderIdentifier)
    {
        $this->container['orderIdentifier'] = $orderIdentifier;

        return $this;
    }

    /**
     * Gets orderReference
     *
     * @return string
     */
    public function getOrderReference()
    {
        return $this->container['orderReference'];
    }

    /**
     * Sets orderReference
     *
     * @param string $orderReference orderReference
     *
     * @return $this
     */
    public function setOrderReference($orderReference)
    {
        $this->container['orderReference'] = $orderReference;

        return $this;
    }

    /**
     * Gets createdOn
     *
     * @return \DateTime
     */
    public function getCreatedOn()
    {
        return $this->container['createdOn'];
    }

    /**
     * Sets createdOn
     *
     * @param \DateTime $createdOn createdOn
     *
     * @return $this
     */
    public function setCreatedOn($createdOn)
    {
        $this->container['createdOn'] = $createdOn;

        return $this;
    }

    /**
     * Gets orderDate
     *
     * @return \DateTime
     */
    public function getOrderDate()
    {
        return $this->container['orderDate'];
    }

    /**
     * Sets orderDate
     *
     * @param \DateTime $orderDate orderDate
     *
     * @return $this
     */
    public function setOrderDate($orderDate)
    {
        $this->container['orderDate'] = $orderDate;

        return $this;
    }

    /**
     * Gets printedOn
     *
     * @return \DateTime
     */
    public function getPrintedOn()
    {
        return $this->container['printedOn'];
    }

    /**
     * Sets printedOn
     *
     * @param \DateTime $printedOn printedOn
     *
     * @return $this
     */
    public function setPrintedOn($printedOn)
    {
        $this->container['printedOn'] = $printedOn;

        return $this;
    }

    /**
     * Gets manifestedOn
     *
     * @return \DateTime
     */
    public function getManifestedOn()
    {
        return $this->container['manifestedOn'];
    }

    /**
     * Sets manifestedOn
     *
     * @param \DateTime $manifestedOn manifestedOn
     *
     * @return $this
     */
    public function setManifestedOn($manifestedOn)
    {
        $this->container['manifestedOn'] = $manifestedOn;

        return $this;
    }

    /**
     * Gets shippedOn
     *
     * @return \DateTime
     */
    public function getShippedOn()
    {
        return $this->container['shippedOn'];
    }

    /**
     * Sets shippedOn
     *
     * @param \DateTime $shippedOn shippedOn
     *
     * @return $this
     */
    public function setShippedOn($shippedOn)
    {
        $this->container['shippedOn'] = $shippedOn;

        return $this;
    }

    /**
     * Gets trackingNumber
     *
     * @return string
     */
    public function getTrackingNumber()
    {
        return $this->container['trackingNumber'];
    }

    /**
     * Sets trackingNumber
     *
     * @param string $trackingNumber trackingNumber
     *
     * @return $this
     */
    public function setTrackingNumber($trackingNumber)
    {
        $this->container['trackingNumber'] = $trackingNumber;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


