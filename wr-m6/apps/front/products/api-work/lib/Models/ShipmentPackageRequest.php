<?php
/**
 * ShipmentPackageRequest
 *
 * PHP version 5
 *
 * @category Class
 * @package  RoyalMail\ClickAndDrop\Rest\Api
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * ChannelShipper & Royal Mail Public API
 *
 * Import your orders, retrieve your orders and generate labels.
 *
 * OpenAPI spec version: 1.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.4.24-SNAPSHOT
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace RoyalMail\ClickAndDrop\Rest\Api\Models;

use \ArrayAccess;
use \RoyalMail\ClickAndDrop\Rest\Api\ObjectSerializer;

/**
 * ShipmentPackageRequest Class Doc Comment
 *
 * @category Class
 * @package  RoyalMail\ClickAndDrop\Rest\Api
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class ShipmentPackageRequest implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'ShipmentPackageRequest';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'weightInGrams' => 'int',
        'packageFormatIdentifier' => 'string',
        'customPackageFormatIdentifier' => 'string',
        'dimensions' => '\RoyalMail\ClickAndDrop\Rest\Api\Models\DimensionsRequest',
        'contents' => '\RoyalMail\ClickAndDrop\Rest\Api\Models\ProductItemRequest[]'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'weightInGrams' => 'int32',
        'packageFormatIdentifier' => null,
        'customPackageFormatIdentifier' => null,
        'dimensions' => null,
        'contents' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'weightInGrams' => 'weightInGrams',
        'packageFormatIdentifier' => 'packageFormatIdentifier',
        'customPackageFormatIdentifier' => 'customPackageFormatIdentifier',
        'dimensions' => 'dimensions',
        'contents' => 'contents'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'weightInGrams' => 'setWeightInGrams',
        'packageFormatIdentifier' => 'setPackageFormatIdentifier',
        'customPackageFormatIdentifier' => 'setCustomPackageFormatIdentifier',
        'dimensions' => 'setDimensions',
        'contents' => 'setContents'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'weightInGrams' => 'getWeightInGrams',
        'packageFormatIdentifier' => 'getPackageFormatIdentifier',
        'customPackageFormatIdentifier' => 'getCustomPackageFormatIdentifier',
        'dimensions' => 'getDimensions',
        'contents' => 'getContents'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    const PACKAGE_FORMAT_IDENTIFIER_UNDEFINED = 'undefined';
    const PACKAGE_FORMAT_IDENTIFIER_LETTER = 'letter';
    const PACKAGE_FORMAT_IDENTIFIER_LARGE_LETTER = 'largeLetter';
    const PACKAGE_FORMAT_IDENTIFIER_SMALL_PARCEL = 'smallParcel';
    const PACKAGE_FORMAT_IDENTIFIER_MEDIUM_PARCEL = 'mediumParcel';
    const PACKAGE_FORMAT_IDENTIFIER_PARCEL = 'parcel';
    const PACKAGE_FORMAT_IDENTIFIER_DOCUMENTS = 'documents';
    const PACKAGE_FORMAT_IDENTIFIER_CUSTOM = 'custom';
    

    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getPackageFormatIdentifierAllowableValues()
    {
        return [
            self::PACKAGE_FORMAT_IDENTIFIER_UNDEFINED,
            self::PACKAGE_FORMAT_IDENTIFIER_LETTER,
            self::PACKAGE_FORMAT_IDENTIFIER_LARGE_LETTER,
            self::PACKAGE_FORMAT_IDENTIFIER_SMALL_PARCEL,
            self::PACKAGE_FORMAT_IDENTIFIER_MEDIUM_PARCEL,
            self::PACKAGE_FORMAT_IDENTIFIER_PARCEL,
            self::PACKAGE_FORMAT_IDENTIFIER_DOCUMENTS,
            self::PACKAGE_FORMAT_IDENTIFIER_CUSTOM,
        ];
    }
    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['weightInGrams'] = isset($data['weightInGrams']) ? $data['weightInGrams'] : null;
        $this->container['packageFormatIdentifier'] = isset($data['packageFormatIdentifier']) ? $data['packageFormatIdentifier'] : null;
        $this->container['customPackageFormatIdentifier'] = isset($data['customPackageFormatIdentifier']) ? $data['customPackageFormatIdentifier'] : null;
        $this->container['dimensions'] = isset($data['dimensions']) ? $data['dimensions'] : null;
        $this->container['contents'] = isset($data['contents']) ? $data['contents'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['weightInGrams'] === null) {
            $invalidProperties[] = "'weightInGrams' can't be null";
        }
        if (($this->container['weightInGrams'] > 30000)) {
            $invalidProperties[] = "invalid value for 'weightInGrams', must be smaller than or equal to 30000.";
        }

        if (($this->container['weightInGrams'] < 1)) {
            $invalidProperties[] = "invalid value for 'weightInGrams', must be bigger than or equal to 1.";
        }

        if ($this->container['packageFormatIdentifier'] === null) {
            $invalidProperties[] = "'packageFormatIdentifier' can't be null";
        }
        $allowedValues = $this->getPackageFormatIdentifierAllowableValues();
        if (!is_null($this->container['packageFormatIdentifier']) && !in_array($this->container['packageFormatIdentifier'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value for 'packageFormatIdentifier', must be one of '%s'",
                implode("', '", $allowedValues)
            );
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets weightInGrams
     *
     * @return int
     */
    public function getWeightInGrams()
    {
        return $this->container['weightInGrams'];
    }

    /**
     * Sets weightInGrams
     *
     * @param int $weightInGrams weightInGrams
     *
     * @return $this
     */
    public function setWeightInGrams($weightInGrams)
    {

        if (($weightInGrams > 30000)) {
            throw new \InvalidArgumentException('invalid value for $weightInGrams when calling ShipmentPackageRequest., must be smaller than or equal to 30000.');
        }
        if (($weightInGrams < 1)) {
            throw new \InvalidArgumentException('invalid value for $weightInGrams when calling ShipmentPackageRequest., must be bigger than or equal to 1.');
        }

        $this->container['weightInGrams'] = $weightInGrams;

        return $this;
    }

    /**
     * Gets packageFormatIdentifier
     *
     * @return string
     */
    public function getPackageFormatIdentifier()
    {
        return $this->container['packageFormatIdentifier'];
    }

    /**
     * Sets packageFormatIdentifier
     *
     * @param string $packageFormatIdentifier <b>Value 'custom' is reserved for ChannelShipper accounts only</b>
     *
     * @return $this
     */
    public function setPackageFormatIdentifier($packageFormatIdentifier)
    {
        $allowedValues = $this->getPackageFormatIdentifierAllowableValues();
        if (!in_array($packageFormatIdentifier, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'packageFormatIdentifier', must be one of '%s'",
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['packageFormatIdentifier'] = $packageFormatIdentifier;

        return $this;
    }

    /**
     * Gets customPackageFormatIdentifier
     *
     * @return string
     */
    public function getCustomPackageFormatIdentifier()
    {
        return $this->container['customPackageFormatIdentifier'];
    }

    /**
     * Sets customPackageFormatIdentifier
     *
     * @param string $customPackageFormatIdentifier Is required if 'packageFormatIdentifier' is provided as 'custom'. <b>Reserved for ChannelShipper accounts only</b>.
     *
     * @return $this
     */
    public function setCustomPackageFormatIdentifier($customPackageFormatIdentifier)
    {
        $this->container['customPackageFormatIdentifier'] = $customPackageFormatIdentifier;

        return $this;
    }

    /**
     * Gets dimensions
     *
     * @return \RoyalMail\ClickAndDrop\Rest\Api\Models\DimensionsRequest
     */
    public function getDimensions()
    {
        return $this->container['dimensions'];
    }

    /**
     * Sets dimensions
     *
     * @param \RoyalMail\ClickAndDrop\Rest\Api\Models\DimensionsRequest $dimensions dimensions
     *
     * @return $this
     */
    public function setDimensions($dimensions)
    {
        $this->container['dimensions'] = $dimensions;

        return $this;
    }

    /**
     * Gets contents
     *
     * @return \RoyalMail\ClickAndDrop\Rest\Api\Models\ProductItemRequest[]
     */
    public function getContents()
    {
        return $this->container['contents'];
    }

    /**
     * Sets contents
     *
     * @param \RoyalMail\ClickAndDrop\Rest\Api\Models\ProductItemRequest[] $contents contents
     *
     * @return $this
     */
    public function setContents($contents)
    {
        $this->container['contents'] = $contents;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


