<?php
/**
 * CreateOrderRequest
 *
 * PHP version 5
 *
 * @category Class
 * @package  RoyalMail\ClickAndDrop\Rest\Api
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * ChannelShipper & Royal Mail Public API
 *
 * Import your orders, retrieve your orders and generate labels.
 *
 * OpenAPI spec version: 1.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.4.24-SNAPSHOT
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace RoyalMail\ClickAndDrop\Rest\Api\Models;

use \ArrayAccess;
use \RoyalMail\ClickAndDrop\Rest\Api\ObjectSerializer;

/**
 * CreateOrderRequest Class Doc Comment
 *
 * @category Class
 * @package  RoyalMail\ClickAndDrop\Rest\Api
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class CreateOrderRequest implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'CreateOrderRequest';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'orderReference' => 'string',
        'recipient' => '\RoyalMail\ClickAndDrop\Rest\Api\Models\RecipientDetailsRequest',
        'sender' => '\RoyalMail\ClickAndDrop\Rest\Api\Models\SenderDetailsRequest',
        'billing' => '\RoyalMail\ClickAndDrop\Rest\Api\Models\BillingDetailsRequest',
        'packages' => '\RoyalMail\ClickAndDrop\Rest\Api\Models\ShipmentPackageRequest[]',
        'orderDate' => '\DateTime',
        'plannedDespatchDate' => '\DateTime',
        'specialInstructions' => 'string',
        'subtotal' => 'float',
        'shippingCostCharged' => 'float',
        'otherCosts' => 'float',
        'total' => 'float',
        'currencyCode' => 'string',
        'postageDetails' => '\RoyalMail\ClickAndDrop\Rest\Api\Models\PostageDetailsRequest',
        'tags' => '\RoyalMail\ClickAndDrop\Rest\Api\Models\TagRequest[]',
        'label' => '\RoyalMail\ClickAndDrop\Rest\Api\Models\LabelGenerationRequest'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'orderReference' => null,
        'recipient' => null,
        'sender' => null,
        'billing' => null,
        'packages' => null,
        'orderDate' => 'date-time',
        'plannedDespatchDate' => 'date-time',
        'specialInstructions' => null,
        'subtotal' => null,
        'shippingCostCharged' => null,
        'otherCosts' => null,
        'total' => null,
        'currencyCode' => null,
        'postageDetails' => null,
        'tags' => null,
        'label' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'orderReference' => 'orderReference',
        'recipient' => 'recipient',
        'sender' => 'sender',
        'billing' => 'billing',
        'packages' => 'packages',
        'orderDate' => 'orderDate',
        'plannedDespatchDate' => 'plannedDespatchDate',
        'specialInstructions' => 'specialInstructions',
        'subtotal' => 'subtotal',
        'shippingCostCharged' => 'shippingCostCharged',
        'otherCosts' => 'otherCosts',
        'total' => 'total',
        'currencyCode' => 'currencyCode',
        'postageDetails' => 'postageDetails',
        'tags' => 'tags',
        'label' => 'label'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'orderReference' => 'setOrderReference',
        'recipient' => 'setRecipient',
        'sender' => 'setSender',
        'billing' => 'setBilling',
        'packages' => 'setPackages',
        'orderDate' => 'setOrderDate',
        'plannedDespatchDate' => 'setPlannedDespatchDate',
        'specialInstructions' => 'setSpecialInstructions',
        'subtotal' => 'setSubtotal',
        'shippingCostCharged' => 'setShippingCostCharged',
        'otherCosts' => 'setOtherCosts',
        'total' => 'setTotal',
        'currencyCode' => 'setCurrencyCode',
        'postageDetails' => 'setPostageDetails',
        'tags' => 'setTags',
        'label' => 'setLabel'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'orderReference' => 'getOrderReference',
        'recipient' => 'getRecipient',
        'sender' => 'getSender',
        'billing' => 'getBilling',
        'packages' => 'getPackages',
        'orderDate' => 'getOrderDate',
        'plannedDespatchDate' => 'getPlannedDespatchDate',
        'specialInstructions' => 'getSpecialInstructions',
        'subtotal' => 'getSubtotal',
        'shippingCostCharged' => 'getShippingCostCharged',
        'otherCosts' => 'getOtherCosts',
        'total' => 'getTotal',
        'currencyCode' => 'getCurrencyCode',
        'postageDetails' => 'getPostageDetails',
        'tags' => 'getTags',
        'label' => 'getLabel'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['orderReference'] = isset($data['orderReference']) ? $data['orderReference'] : null;
        $this->container['recipient'] = isset($data['recipient']) ? $data['recipient'] : null;
        $this->container['sender'] = isset($data['sender']) ? $data['sender'] : null;
        $this->container['billing'] = isset($data['billing']) ? $data['billing'] : null;
        $this->container['packages'] = isset($data['packages']) ? $data['packages'] : null;
        $this->container['orderDate'] = isset($data['orderDate']) ? $data['orderDate'] : null;
        $this->container['plannedDespatchDate'] = isset($data['plannedDespatchDate']) ? $data['plannedDespatchDate'] : null;
        $this->container['specialInstructions'] = isset($data['specialInstructions']) ? $data['specialInstructions'] : null;
        $this->container['subtotal'] = isset($data['subtotal']) ? $data['subtotal'] : null;
        $this->container['shippingCostCharged'] = isset($data['shippingCostCharged']) ? $data['shippingCostCharged'] : null;
        $this->container['otherCosts'] = isset($data['otherCosts']) ? $data['otherCosts'] : null;
        $this->container['total'] = isset($data['total']) ? $data['total'] : null;
        $this->container['currencyCode'] = isset($data['currencyCode']) ? $data['currencyCode'] : null;
        $this->container['postageDetails'] = isset($data['postageDetails']) ? $data['postageDetails'] : null;
        $this->container['tags'] = isset($data['tags']) ? $data['tags'] : null;
        $this->container['label'] = isset($data['label']) ? $data['label'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if (!is_null($this->container['orderReference']) && (mb_strlen($this->container['orderReference']) > 40)) {
            $invalidProperties[] = "invalid value for 'orderReference', the character length must be smaller than or equal to 40.";
        }

        if ($this->container['recipient'] === null) {
            $invalidProperties[] = "'recipient' can't be null";
        }
        if ($this->container['orderDate'] === null) {
            $invalidProperties[] = "'orderDate' can't be null";
        }
        if (!is_null($this->container['specialInstructions']) && (mb_strlen($this->container['specialInstructions']) > 500)) {
            $invalidProperties[] = "invalid value for 'specialInstructions', the character length must be smaller than or equal to 500.";
        }

        if ($this->container['subtotal'] === null) {
            $invalidProperties[] = "'subtotal' can't be null";
        }
        if ($this->container['shippingCostCharged'] === null) {
            $invalidProperties[] = "'shippingCostCharged' can't be null";
        }
        if ($this->container['total'] === null) {
            $invalidProperties[] = "'total' can't be null";
        }
        if (!is_null($this->container['currencyCode']) && (mb_strlen($this->container['currencyCode']) > 3)) {
            $invalidProperties[] = "invalid value for 'currencyCode', the character length must be smaller than or equal to 3.";
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets orderReference
     *
     * @return string
     */
    public function getOrderReference()
    {
        return $this->container['orderReference'];
    }

    /**
     * Sets orderReference
     *
     * @param string $orderReference orderReference
     *
     * @return $this
     */
    public function setOrderReference($orderReference)
    {
        if (!is_null($orderReference) && (mb_strlen($orderReference) > 40)) {
            throw new \InvalidArgumentException('invalid length for $orderReference when calling CreateOrderRequest., must be smaller than or equal to 40.');
        }

        $this->container['orderReference'] = $orderReference;

        return $this;
    }

    /**
     * Gets recipient
     *
     * @return \RoyalMail\ClickAndDrop\Rest\Api\Models\RecipientDetailsRequest
     */
    public function getRecipient()
    {
        return $this->container['recipient'];
    }

    /**
     * Sets recipient
     *
     * @param \RoyalMail\ClickAndDrop\Rest\Api\Models\RecipientDetailsRequest $recipient recipient
     *
     * @return $this
     */
    public function setRecipient($recipient)
    {
        $this->container['recipient'] = $recipient;

        return $this;
    }

    /**
     * Gets sender
     *
     * @return \RoyalMail\ClickAndDrop\Rest\Api\Models\SenderDetailsRequest
     */
    public function getSender()
    {
        return $this->container['sender'];
    }

    /**
     * Sets sender
     *
     * @param \RoyalMail\ClickAndDrop\Rest\Api\Models\SenderDetailsRequest $sender sender
     *
     * @return $this
     */
    public function setSender($sender)
    {
        $this->container['sender'] = $sender;

        return $this;
    }

    /**
     * Gets billing
     *
     * @return \RoyalMail\ClickAndDrop\Rest\Api\Models\BillingDetailsRequest
     */
    public function getBilling()
    {
        return $this->container['billing'];
    }

    /**
     * Sets billing
     *
     * @param \RoyalMail\ClickAndDrop\Rest\Api\Models\BillingDetailsRequest $billing billing
     *
     * @return $this
     */
    public function setBilling($billing)
    {
        $this->container['billing'] = $billing;

        return $this;
    }

    /**
     * Gets packages
     *
     * @return \RoyalMail\ClickAndDrop\Rest\Api\Models\ShipmentPackageRequest[]
     */
    public function getPackages()
    {
        return $this->container['packages'];
    }

    /**
     * Sets packages
     *
     * @param \RoyalMail\ClickAndDrop\Rest\Api\Models\ShipmentPackageRequest[] $packages packages
     *
     * @return $this
     */
    public function setPackages($packages)
    {
        $this->container['packages'] = $packages;

        return $this;
    }

    /**
     * Gets orderDate
     *
     * @return \DateTime
     */
    public function getOrderDate()
    {
        return $this->container['orderDate'];
    }

    /**
     * Sets orderDate
     *
     * @param \DateTime $orderDate orderDate
     *
     * @return $this
     */
    public function setOrderDate($orderDate)
    {
        $this->container['orderDate'] = $orderDate;

        return $this;
    }

    /**
     * Gets plannedDespatchDate
     *
     * @return \DateTime
     */
    public function getPlannedDespatchDate()
    {
        return $this->container['plannedDespatchDate'];
    }

    /**
     * Sets plannedDespatchDate
     *
     * @param \DateTime $plannedDespatchDate plannedDespatchDate
     *
     * @return $this
     */
    public function setPlannedDespatchDate($plannedDespatchDate)
    {
        $this->container['plannedDespatchDate'] = $plannedDespatchDate;

        return $this;
    }

    /**
     * Gets specialInstructions
     *
     * @return string
     */
    public function getSpecialInstructions()
    {
        return $this->container['specialInstructions'];
    }

    /**
     * Sets specialInstructions
     *
     * @param string $specialInstructions specialInstructions
     *
     * @return $this
     */
    public function setSpecialInstructions($specialInstructions)
    {
        if (!is_null($specialInstructions) && (mb_strlen($specialInstructions) > 500)) {
            throw new \InvalidArgumentException('invalid length for $specialInstructions when calling CreateOrderRequest., must be smaller than or equal to 500.');
        }

        $this->container['specialInstructions'] = $specialInstructions;

        return $this;
    }

    /**
     * Gets subtotal
     *
     * @return float
     */
    public function getSubtotal()
    {
        return $this->container['subtotal'];
    }

    /**
     * Sets subtotal
     *
     * @param float $subtotal subtotal
     *
     * @return $this
     */
    public function setSubtotal($subtotal)
    {
        $this->container['subtotal'] = $subtotal;

        return $this;
    }

    /**
     * Gets shippingCostCharged
     *
     * @return float
     */
    public function getShippingCostCharged()
    {
        return $this->container['shippingCostCharged'];
    }

    /**
     * Sets shippingCostCharged
     *
     * @param float $shippingCostCharged shippingCostCharged
     *
     * @return $this
     */
    public function setShippingCostCharged($shippingCostCharged)
    {
        $this->container['shippingCostCharged'] = $shippingCostCharged;

        return $this;
    }

    /**
     * Gets otherCosts
     *
     * @return float
     */
    public function getOtherCosts()
    {
        return $this->container['otherCosts'];
    }

    /**
     * Sets otherCosts
     *
     * @param float $otherCosts otherCosts
     *
     * @return $this
     */
    public function setOtherCosts($otherCosts)
    {
        $this->container['otherCosts'] = $otherCosts;

        return $this;
    }

    /**
     * Gets total
     *
     * @return float
     */
    public function getTotal()
    {
        return $this->container['total'];
    }

    /**
     * Sets total
     *
     * @param float $total total
     *
     * @return $this
     */
    public function setTotal($total)
    {
        $this->container['total'] = $total;

        return $this;
    }

    /**
     * Gets currencyCode
     *
     * @return string
     */
    public function getCurrencyCode()
    {
        return $this->container['currencyCode'];
    }

    /**
     * Sets currencyCode
     *
     * @param string $currencyCode currencyCode
     *
     * @return $this
     */
    public function setCurrencyCode($currencyCode)
    {
        if (!is_null($currencyCode) && (mb_strlen($currencyCode) > 3)) {
            throw new \InvalidArgumentException('invalid length for $currencyCode when calling CreateOrderRequest., must be smaller than or equal to 3.');
        }

        $this->container['currencyCode'] = $currencyCode;

        return $this;
    }

    /**
     * Gets postageDetails
     *
     * @return \RoyalMail\ClickAndDrop\Rest\Api\Models\PostageDetailsRequest
     */
    public function getPostageDetails()
    {
        return $this->container['postageDetails'];
    }

    /**
     * Sets postageDetails
     *
     * @param \RoyalMail\ClickAndDrop\Rest\Api\Models\PostageDetailsRequest $postageDetails postageDetails
     *
     * @return $this
     */
    public function setPostageDetails($postageDetails)
    {
        $this->container['postageDetails'] = $postageDetails;

        return $this;
    }

    /**
     * Gets tags
     *
     * @return \RoyalMail\ClickAndDrop\Rest\Api\Models\TagRequest[]
     */
    public function getTags()
    {
        return $this->container['tags'];
    }

    /**
     * Sets tags
     *
     * @param \RoyalMail\ClickAndDrop\Rest\Api\Models\TagRequest[] $tags tags
     *
     * @return $this
     */
    public function setTags($tags)
    {
        $this->container['tags'] = $tags;

        return $this;
    }

    /**
     * Gets label
     *
     * @return \RoyalMail\ClickAndDrop\Rest\Api\Models\LabelGenerationRequest
     */
    public function getLabel()
    {
        return $this->container['label'];
    }

    /**
     * Sets label
     *
     * @param \RoyalMail\ClickAndDrop\Rest\Api\Models\LabelGenerationRequest $label label
     *
     * @return $this
     */
    public function setLabel($label)
    {
        $this->container['label'] = $label;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


